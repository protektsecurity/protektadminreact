// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: q6Cwxrcdt1UGt1jEj7TGjX
// Component: FeIozAZMsB6-

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { RichLayout } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-layout";
import { AntdRadioGroup } from "@plasmicpkgs/antd5/skinny/registerRadio";
import { AntdRadio } from "@plasmicpkgs/antd5/skinny/registerRadio";
import { DataFetcher } from "@plasmicpkgs/plasmic-query";
import Statistic from "../../Statistic"; // plasmic-import: puzdr0pRy6In/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: q6Cwxrcdt1UGt1jEj7TGjX/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: FeIozAZMsB6-/css

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  richAppLayout?: Flex__<typeof RichLayout>;
  img?: Flex__<typeof PlasmicImg__>;
  radioGroup?: Flex__<typeof AntdRadioGroup>;
  httpRestApiFetcher?: Flex__<typeof DataFetcher>;
  statistic?: Flex__<typeof Statistic>;
};

export interface DefaultHomepageProps {
  className?: string;
}

const $$ = {};

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "radioGroup.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "all"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <RichLayout
            data-plasmic-name={"richAppLayout"}
            data-plasmic-override={overrides.richAppLayout}
            className={classNames("__wab_instance", sty.richAppLayout)}
            logoElement={
              <PlasmicImg__
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                src={"https://static1.plasmic.app/fake-logo.svg"}
              />
            }
            navMenuItems={[{ path: "/", name: "Home" }]}
            title={"protektVPN"}
          >
            <AntdRadioGroup
              data-plasmic-name={"radioGroup"}
              data-plasmic-override={overrides.radioGroup}
              className={classNames("__wab_instance", sty.radioGroup)}
              defaultValue={"all"}
              onChange={generateStateOnChangeProp($state, [
                "radioGroup",
                "value"
              ])}
              optionType={"button"}
              options={(() => {
                const __composite = [
                  { value: null, label: null },
                  { value: null, label: null },
                  { value: null, label: null }
                ];
                __composite["0"]["value"] = "all";
                __composite["0"]["label"] = "All";
                __composite["1"]["value"] = "month";
                __composite["1"]["label"] = "Month";
                __composite["2"]["value"] = "week";
                __composite["2"]["label"] = "Week";
                return __composite;
              })()}
              useChildren={false}
              value={generateStateValueProp($state, ["radioGroup", "value"])}
            >
              <AntdRadio
                className={classNames("__wab_instance", sty.radio__wGlPr)}
                value={"op1"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___9XXn
                  )}
                >
                  {"Option 1"}
                </div>
              </AntdRadio>
              <AntdRadio
                className={classNames("__wab_instance", sty.radio__ryJdd)}
                value={"op2"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___6P7Ym
                  )}
                >
                  {"Option 2"}
                </div>
              </AntdRadio>
            </AntdRadioGroup>
            <DataFetcher
              data-plasmic-name={"httpRestApiFetcher"}
              data-plasmic-override={overrides.httpRestApiFetcher}
              className={classNames("__wab_instance", sty.httpRestApiFetcher)}
              dataName={"fetchedData"}
              errorDisplay={
                <DataCtxReader__>
                  {$ctx => "Error fetching data"}
                </DataCtxReader__>
              }
              errorName={``}
              headers={{
                "Content-Type": "application/json",
                Accept: "application/json"
              }}
              loadingDisplay={
                <DataCtxReader__>{$ctx => "Loading..."}</DataCtxReader__>
              }
              method={"GET"}
              noLayout={false}
              previewErrorDisplay={false}
              previewSpinner={false}
              url={(() => {
                try {
                  return (
                    "https://access.protekt.app/stat?period=" +
                    `${$state.radioGroup.value}`
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return ``;
                  }
                  throw e;
                }
              })()}
            >
              <DataCtxReader__>
                {$ctx =>
                  (_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return Object.keys($ctx.fetchedData.regions);
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <Statistic
                        data-plasmic-name={"statistic"}
                        data-plasmic-override={overrides.statistic}
                        className={classNames("__wab_instance", sty.statistic)}
                        key={currentIndex}
                        number={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__klClZ
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (() => {
                                    var mb =
                                      $ctx.fetchedData.regions[currentItem];
                                    var showMB = mb + " MB";
                                    if (mb > 1024) {
                                      showMB =
                                        Math.round((mb / 1024) * 100) / 100 +
                                        " GB";
                                    }
                                    if (mb > 1024 * 1024) {
                                      showMB =
                                        Math.round((mb / 1024 / 1024) * 100) /
                                          100 +
                                        " TB";
                                    }
                                    return showMB;
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "3,193";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        }
                        unit={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ly3Ms
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Active Users";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        }
                      />
                    );
                  })
                }
              </DataCtxReader__>
            </DataFetcher>
          </RichLayout>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "richAppLayout",
    "img",
    "radioGroup",
    "httpRestApiFetcher",
    "statistic"
  ],
  richAppLayout: [
    "richAppLayout",
    "img",
    "radioGroup",
    "httpRestApiFetcher",
    "statistic"
  ],
  img: ["img"],
  radioGroup: ["radioGroup"],
  httpRestApiFetcher: ["httpRestApiFetcher", "statistic"],
  statistic: ["statistic"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  richAppLayout: typeof RichLayout;
  img: typeof PlasmicImg__;
  radioGroup: typeof AntdRadioGroup;
  httpRestApiFetcher: typeof DataFetcher;
  statistic: typeof Statistic;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    richAppLayout: makeNodeComponent("richAppLayout"),
    img: makeNodeComponent("img"),
    radioGroup: makeNodeComponent("radioGroup"),
    httpRestApiFetcher: makeNodeComponent("httpRestApiFetcher"),
    statistic: makeNodeComponent("statistic"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "protektAdmin",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
